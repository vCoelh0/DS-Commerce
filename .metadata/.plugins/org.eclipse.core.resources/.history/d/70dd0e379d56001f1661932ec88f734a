package com.coelhodev.dscommerce.services;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.coelhodev.dscommerce.dto.ProductDTO;
import com.coelhodev.dscommerce.entities.Product;
import com.coelhodev.dscommerce.repositories.ProductRepository;
import com.coelhodev.dscommerce.services.exceptions.ResourceNotFoundException;

import jakarta.persistence.EntityNotFoundException;

@Service

public class ProductService {

	@Autowired
	private ProductRepository repository;
	
	@Transactional(readOnly = true)
	public ProductDTO findById(Long id) {
		Product product = repository.findById(id).orElseThrow(() -> new ResourceNotFoundException("Recurso não encontrado"));
		return new ProductDTO(product);
	
	}
	
	
	@Transactional(readOnly = true)
	public Page <ProductDTO> findAll(Pageable pageable) {
		Page <Product> result = repository.findAll(pageable);
		return result.map(x -> new ProductDTO(x));	
	}
	
	
	@Transactional
	public ProductDTO insert (ProductDTO dto) {
		
		Product entity = new Product();
		copyDtoToEntity(dto, entity);
		
		entity = repository.save(entity);
		return new ProductDTO(entity);
	}
	
	@Transactional
	public ProductDTO update (Long id, ProductDTO dto) {
	
	try {	
		Product entity = repository.getReferenceById(id);
		copyDtoToEntity(dto, entity);
		entity = repository.save(entity);
		return new ProductDTO(entity);
	}
	catch (EntityNotFoundException e) {
		throw new ResourceNotFoundException("Recurso não encontrado");
	}
	}
	
	@Transactional
	public void delete(Long id) {
		repository.deleteById(id);
	}
	
	
	
	// ============== METODO AUXILIAR PARA NAO FICAR REPETINDO O CODIGO =============================
	private void copyDtoToEntity(ProductDTO dto, Product entity) {
		entity.setName(dto.getName());
		entity.setDescription(dto.getDescription());
		entity.setPrice(dto.getPrice());
		entity.setImgUrl(dto.getImgUrl());
		
		
	}


}
